name: Build and Deploy Spring Application

on:
  push:
    branches:
      - main 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Replace secrets in application.yml
      run: |
        sed -i -e "s#{{ACTIVE_PROFILE}}#${{ secrets.ACTIVE_PROFILE }}#g" ./src/main/resources/application.yml
        sed -i -e "s#{{GOOGLE_CLIENT_ID}}#${{ secrets.GOOGLE_CLIENT_ID }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{GOOGLE_CLIENT_SECRET}}#${{ secrets.GOOGLE_CLIENT_SECRET }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{KAKAO_CLIEND_ID}}#${{ secrets.KAKAO_CLIEND_ID }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{KAKAO_CLIENT_SECRET}}#${{ secrets.KAKAO_CLIENT_SECRET }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{DATASOURCE_URL}}#${{ secrets.DATASOURCE_URL }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{DB_USERNAME}}#${{ secrets.DB_USERNAME }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{DB_PASSWORD}}#${{ secrets.DB_PASSWORD }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{JWT_SECRET}}#${{ secrets.JWT_SECRET }}#g" ./src/main/resources/application-prd.yml
        # sed -i -e "s#{{REDIRECT_URL}}#${{ secrets.REDIRECT_URL }}#g" ./src/main/resources/application-prd.yml
        # sed -i -e "s#{{REDIRECT_URL_FAILED}}#${{ secrets.REDIRECT_URL_FAILED }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{REDIRECT_URL}}#${{ secrets.LOCAL_REDIRECT_URL }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{REDIRECT_URL_FAILED}}#${{ secrets.LOCAL_REDIRECT_URL_FAILED }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{AWS_ACCESS_KEY}}#${{ secrets.AWS_ACCESS_KEY }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{AWS_SECRET_ACCESS_KEY}}#${{ secrets.AWS_SECRET_ACCESS_KEY }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{AWS_IMAGE_BUCKET_NAME}}#${{ secrets.AWS_IMAGE_BUCKET_NAME }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{AWS_USER_RAWDATA_BUCKET_NAME}}#${{ secrets.AWS_USER_RAWDATA_BUCKET_NAME }}#g" ./src/main/resources/application-prd.yml
        
        sed -i -e "s#{{FRONT_SERVER_URL}}#${{ secrets.FRONT_SERVER_URL }}#g" ./src/main/resources/application-prd.yml
        # sed -i -e "s#{{FRONT_SERVER_URL}}#${{ secrets.LOCAL_FRONT_SERVER_URL }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{VWORLD_CONFORM_KEY}}#${{ secrets.VWORLD_CONFORM_KEY }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{JUSO_CONFORM_KEY}}#${{ secrets.JUSO_CONFORM_KEY }}#g" ./src/main/resources/application-prd.yml

    - name: Verify application.yml content
      run: cat ./src/main/resources/application-prd.yml

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}  
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Build and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: easymap-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    # - name: Download task definition
    #   run: |
    #     aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TD }} --query taskDefinition > task-definition.json

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: ${{ secrets.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ secrets.ECS_SERVICE_NAME }} 
    #     cluster: ${{ secrets.ECS_CLUSTER_NAME }} 
    #     wait-for-service-stability: true
    #     codedeploy-appspec: appspec.yml
    #     codedeploy-application: ${{ secrets.CODEDEPLOY_APPLICATION_NAME }}
    #     codedeploy-deployment-group: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} 